---
- name: Download | Prepare working directories and variables
  import_tasks: prep_download.yml
  when:
    - not skip_downloads | default(false)
  tags:
    - download
    - upload

- name: Download | Get kubeadm binary and list of required images
  include_tasks: prep_kubeadm_images.yml
  when:
    - not skip_downloads | default(false)
    - ('kube_control_plane' in group_names)
  tags:
    - download
    - upload

- name: Download | Get list of images on the node
  when:
    - not (download_always_pull or skip_downloads) | default(false)
  block:
    - name: Download | Generate a list of information about the images on a node
      command: "{{ image_info_command }}"
      register: node_images_raw
      changed_when: false
      check_mode: false
    - name: Download | Set node_images (crictl)
      set_fact:
        node_images: >-
          {{
            (node_images | default([])) +
            [{'Digest': (item.repoDigests[0] | split('@'))[1], 'Repository': ((item.repoTags[0] | split(':'))[0] | regex_replace('^docker\.io/(library/)?', '')), 'Tag': (item.repoTags[0] | split(':'))[1]}]
          }}
      with_items: "{{ (node_images_raw.stdout | from_json).images }}"
      when:
        - image_command_tool == 'crictl'
        - node_images_raw.stdout != ''
    # In case of nerdctl or docker, the output is already in the expected format
    # {"Digest":"sha256:847423221ed040798e47df36450edce5581ed642cd087ccb210532764da38b23","Repository":"quay.io/coreos/etcd","Tag":"v3.5.12"}
    # {"Digest":"sha256:34fc87c4a60c0b3ba3b3608871f4494de8072c02808a4151953068f2d7c87743","Repository":"flannel/flannel","Tag":"latest"}
    - name: Download | Set node_images (nerdctl, docker)
      set_fact:
        node_images: "{{ node_images_raw.stdout_lines | map('from_json') | list }}"
      when:
        - image_command_tool in ['nerdctl', 'docker']
        - when node_images_raw.stdout_lines != ''

- name: Show node images
  debug:
    msg: "{{ node_images }}"

- name: Download | Download files / images
  include_tasks: "{{ include_file }}"
  loop: "{{ downloads | combine(kubeadm_images) | dict2items }}"
  vars:
    download: "{{ download_defaults | combine(item.value) }}"
    include_file: "download_{% if download.container %}container{% else %}file{% endif %}.yml"
  when:
    - not skip_downloads | default(false)
    - download.enabled
    - item.value.enabled
    - >
      (
        not (
          item.value.container | default(false)
        )
      )
      or (
        item.value.container and
        download_container and
        (
          not (
            (
                node_images | selectattr('Repository', 'equalto', (item.value.repo | regex_replace('^docker\.io/(library/)?', ''))) | selectattr('Tag', 'equalto', item.value.tag) | list | length > 0
            )
            or (
              node_images | selectattr('Digest', 'equalto', 'sha256:' ~ (item.value.sha256 | default(None))) | list | length > 0
            )
          )
          or download_always_pull
        )
      )
    - (download_run_once and inventory_hostname == download_delegate) or (group_names | intersect(download.groups) | length)

- name: Show downloads
  debug:
    msg: "{{ downloads }}"
